name: "Setup and Release CodeQL with Standards and Dependencies"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  setup-and-release:
    runs-on: windows-latest

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v2

      - name: "Define download URLs"
        shell: bash
        run: |
          CODEQL_BINARIES_URL="https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql-win64.zip"
          QUERIES_URL="https://github.com/github/codeql/archive/refs/tags/codeql-cli/latest.zip"
          CODING_STANDARDS_URL="https://github.com/github/codeql-coding-standards/releases/latest/download/code-scanning-cpp-query-pack.zip"

          echo "Downloading CodeQL Binaries..."
          CODEQL_BINARIES_URL="https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql-win64.zip"
          echo "Downloading from: $CODEQL_BINARIES_URL"
          curl -s -L -o codeql-win64.zip "$CODEQL_BINARIES_URL"

          echo "Downloading Queries..."
          QUERIES_URL="https://github.com/github/codeql/archive/refs/tags/codeql-cli/latest.zip"
          echo "Downloading from: $QUERIES_URL"
          curl -s -L -o codeql-queries.zip "$QUERIES_URL"

          echo "Downloading Coding Standards..."
          CODING_STANDARDS_URL="https://github.com/github/codeql-coding-standards/releases/latest/download/code-scanning-cpp-query-pack.zip"
          echo "Downloading from: $CODING_STANDARDS_URL"
          curl -s -L -o codeql-coding-standards.zip "$CODING_STANDARDS_URL"

      - name: "Unzip CodeQL Files with Rules"
        run: |
          # Function to unzip a file based on specified cases
          unzip_file() {
              local zip_file="$1"  # The zip file to process
          	  base_dir="${zip_file%.zip}"
          
              echo "===================================="
              echo "Processing file: $zip_file"
              
              # Store the contents of the zip file in the variable 'toto'
              toto=$(unzip -Z1 "$zip_file")
          
              # Echo the contents stored in the variable
              echo "Contents of $zip_file:"
              echo "$toto"
          
              # Count root-level directories and files
              root_directory_count=$(echo "$toto" | grep -E '^[^/]+/$' | wc -l)  # Count root-level directories
              root_file_count=$(echo "$toto" | grep -E '^[^/]+[^/]*$' | wc -l)  # Count root-level files
          
              # Decision structure based on the counts
              if [[ $root_directory_count -eq 1 ]]; then
                  # Case 1: Only one root folder (can have recursive folders/files)
                  echo "  └── Case 1: Only one root folder found."
          		first_directory=$(unzip -Z1 "$zip_file" | grep '/$' | head -n 1)
                  unzip -q "$zip_file"
          		mv $first_directory  $base_dir
          
              elif [[ $root_file_count -eq 1 && $root_directory_count -eq 0 ]]; then
                  # Case 2: Only one file at the root (could be a zip file)
                  echo "  └── Case 2: Only one file found at the root."
                  single_file=$(echo "$toto" | grep -E '^[^/]+[^/]*$')
                  
                  if [[ $single_file == *.zip ]]; then
                      echo "      └── Extracting nested zip file: $single_file"
                      unzip -q "$zip_file" .  # Unzip the zip file to the current directory
          			mv $zip_file ${zip_file%.zip}_ref.zip  # Remove the nested zip after extraction
          			mv $single_file $zip_file
                      # Recursive call for the extracted zip file
                      unzip_file "$zip_file"  # Call function recursively
                  else
                      echo "      └── The file is not a zip: $single_file"
                  fi
              else
                  # Case 3: Multiple root folders or files
                  echo "  └── Case 3: Multiple root folders or files found."
                  unzip -q "$zip_file" "$base_dir"  # Unzip everything directly to the current directory
          
              fi
          }
          # Process each .zip file
          for zip_file in *.zip; do
              unzip_file "$zip_file"
          done
        shell: bash

      - name: "Install Dependencies in Coding Standards Packages"
        run: |
          echo "Installing dependencies in cert package..."
          cd codeql-coding-standards/c/cert/src
          ../../../../codeql/codeql/codeql.exe pack install --dir .codeql_packages
          cd -

          echo "Installing dependencies in common package..."
          cd codeql-coding-standards/c/common/src
          ../../../../codeql/codeql/codeql.exe pack install --dir .codeql_packages
          cd -
        shell: bash

      - name: "Archive Installed Packages from CodeQL Cache"
        run: |
          echo "Archiving installed packages from CodeQL cache..."
          zip -r codeql_cache_packages.zip C:/Users/RunnerUser/.codeql/packages
        shell: bash

      - name: "Delete Existing Release v1"
        id: delete_release
        run: |
          echo "Checking for existing release..."
          existing_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/v1 | jq -r '.id')
          
          if [ "$existing_release" != "null" ]; then
            echo "Deleting existing release v1..."
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$existing_release
          else
            echo "No existing release v1 found."
          fi
        shell: bash

      - name: "Create New GitHub Release v1"
        run: |
          echo "Creating new release v1..."
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name": "v1", "name": "Release v1", "body": "This release includes updated CodeQL binaries and standards."}' \
            https://api.github.com/repos/${{ github.repository }}/releases)

          echo "Release created: $response"
        shell: bash

      - name: "Upload CodeQL Zip to Release"
        run: |
          echo "Uploading CodeQL archive to release..."
          release_id=$(echo "$response" | jq -r '.id')
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"./codeql_cache_packages.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=codeql_cache_packages.zip"
        shell: bash
